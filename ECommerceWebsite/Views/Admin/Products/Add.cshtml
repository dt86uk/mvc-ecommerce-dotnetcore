@using ECommerceWebsite.Models.Admin

@model AddProductViewModel
@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    string productActionMessage = TempData["ProductAction"] != null ? TempData["ProductAction"].ToString() : string.Empty;
}
<div class="titleHeader">Add Product</div>

@if (!string.IsNullOrEmpty(productActionMessage))
{
    <div class="messageBox">
        @if (Model.ActionResponse.ActionSuccessful)
        {
            <div class="confirmMessage">
                Product successfully added.
                <img src="/img/icon-pack/png/icon-green-tick.png" class="messageImg">
            </div>
        }
        else
        {
            <div class="confirmMessage">
                @Model.ActionResponse?.Error?.Message
                @*TODO: We need a red cross icon similar type to green tick*@
                @*<img src="/img/icon-pack/png/icon-green-tick.png" class="messageImg">*@
            </div>
        }
    </div>
}

@using (Html.BeginForm("AddProduct", "products", Model, FormMethod.Post, false, new { enctype = "multipart/form-data", @class = "form" }))
{
    @Html.ValidationSummary(false, string.Empty, new { @class = "required" })

    <div>
        <div class="floatLeft width30perc">
            @Html.LabelFor(p => p.Brands)
        </div>
        <div class="floatLeft">
            @Html.DropDownListFor(p => p.SelectedBrand, Model.Brands, "Select Brand", new { @class = "width200px" })
        </div>
        <div class="clearBoth"></div>
    </div>

    <div>
        <div class="floatLeft width30perc">
            @Html.LabelFor(p => p.ProductName)
        </div>
        <div class="floatLeft">
            @Html.TextBoxFor(p => p.ProductName, new { @class = "width200px" })
        </div>
        <div class="clearBoth"></div>
    </div>

    <div>
        <div class="floatLeft width30perc">
            @Html.LabelFor(p => p.Price, new { placeholder = "200.00" }) ($)
        </div>
        <div class="floatLeft">
            @Html.TextBoxFor(p => p.Price, new { @class = "width200px" })
        </div>
        <div class="clearBoth"></div>
    </div>

    <div>
        <div class="floatLeft width30perc">
            @Html.LabelFor(p => p.Description)
        </div>
        <div class="floatLeft">
            @Html.TextAreaFor(p => p.Description, new { @class = "textArea" })
        </div>
        <div class="clearBoth"></div>
    </div>

    <div>
        <div class="floatLeft width30perc">
            @Html.LabelFor(p => p.Genders)
        </div>
        <div class="floatLeft">
            @Html.DropDownListFor(p => p.SelectedGender, Model.Genders, "Select Gender", new { @class = "width200px" })
        </div>
        <div class="clearBoth"></div>
    </div>

    <div>
        <div class="floatLeft width30perc">
            @Html.LabelFor(p => p.Categories)
        </div>
        <div class="floatLeft">
            @Html.DropDownListFor(p => p.SelectedCategory, Model.Categories, "Select Category", new { @class = "width200px" })
        </div>
        <div class="clearBoth"></div>
    </div>

    <div>
        <div class="floatLeft width30perc">
            @Html.LabelFor(p => p.ProductTypes)
        </div>
        <div class="floatLeft">
            @Html.DropDownListFor(p => p.SelectedProductType, Model.ProductTypes, "Select Product Type", new { @class = "width200px" })
        </div>
        <div class="clearBoth"></div>
    </div>

    <div>
        <div class="floatLeft width30perc">
            @Html.LabelFor(p => p.SizesJson)
        </div>
        <div class="floatLeft">
            @Html.HiddenFor(p => p.SizesJson)
            <div id="divSizesJson" class="marginBot10">
                <div id="divSize0" class="addSizeContainer paddingTopBot5">
                    Size Name: <input id="sizes0_SizeName" type="text" class="inlineBlock sizeCtrl" value="" onkeyup="canEnableAddSizeButton();" />
                    Quantity: <input id="sizes0_Quantity" class="width40px inlineBlock sizeCtrl" type="text" value="" onkeyup="canEnableAddSizeButton();" />
                </div>
            </div>

            <input id="btnAddSize" disabled onclick="addNewSize();" type="button" value="Add Another Size" />
        </div>
        <div class="clearBoth"></div>
    </div>

    <div>
        <div class="floatLeft width30perc">
            @Html.LabelFor(p => p.HeroImage)
        </div>
        <div class="floatLeft">
            @Html.TextBoxFor(p => p.HeroImage, new { type = "file" })
        </div>
        <div class="clearBoth"></div>
    </div>

    <div>
        <div class="floatLeft width30perc">
            @Html.LabelFor(p => p.Image1)
        </div>
        <div class="floatLeft">
            <div>
                @Html.TextBoxFor(p => p.Image1, new { type = "file" })
            </div>

            <div>
                @Html.TextBoxFor(p => p.Image2, new { type = "file" })
            </div>

            <div>
                @Html.TextBoxFor(p => p.Image3, new { type = "file" })
            </div>

            <div>
                @Html.TextBoxFor(p => p.Image4, new { type = "file" })
            </div>
        </div>
        <div class="clearBoth"></div>
    </div>

    <div>
        <div class="floatLeft width30perc">
            Is Product Live? <br />
            <span class="helpText">* This will make the product available to customers immediately.</span>
        </div>
        <div class="floatLeft isProductLiveCheckbox">
            @Html.CheckBoxFor(p => Model.IsActive)
        </div>
    </div>

    <div class="paddingTopBot10">
        <div class="floatLeft width30perc">
            &nbsp;&nbsp;
        </div>
        <div class="floatLeft">
            <input id="btnSubmit" value="Add Product" type="submit" onclick="serializeSizes();" class="btnSubmit redOrangeGrad" />
        </div>
        <div class="clearBoth"></div>
    </div>
}